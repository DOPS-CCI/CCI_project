<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema 
    targetNamespace="http://www.zoomlenz.net/Electrode"
    xmlns:x="http://www.zoomlenz.net/Electrode"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" vc:minVersion="1.1"
    elementFormDefault="qualified"
    xpathDefaultNamespace="##defaultNamespace">
    
    <xsd:element name="Electrodes">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="x:Electrode" maxOccurs="unbounded"/>
            </xsd:sequence>
            <xsd:attribute name="Type" use="required">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string">
                        <xsd:enumeration value="PhiTheta"/>
                        <xsd:enumeration value="XY"/>
                        <xsd:enumeration value="XYZ"/>
                        <xsd:enumeration value="RPhiTheta"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:anyAttribute notNamespace="##targetNamespace"/>
            <xsd:assert test="if (@Type = 'RPhiTheta') then ./x:Electrode/x:R and ./x:Electrode/x:Theta and ./x:Electrode/x:Phi and
                not(./x:Electrode/x:X) and not(./x:Electrode/x:Y) and not(./x:Electrode/x:Z) else true()"/>            
            <xsd:assert test="if (@Type = 'PhiTheta') then not(./x:Electrode/x:R) and ./x:Electrode/x:Theta and ./x:Electrode/x:Phi and 
                not(./x:Electrode/x:X) and not(./x:Electrode/x:Y) and not(./x:Electrode/x:Z) else true()"/>            
            <xsd:assert test="if (@Type = 'XYZ') then ./x:Electrode/x:X and ./x:Electrode/x:Y and ./x:Electrode/x:Z and
                not(./x:Electrode/x:R) and not(./x:Electrode/x:Phi) and not(./x:Electrode/x:Theta) else true()"/>            
            <xsd:assert test="if (@Type = 'XY') then not(./x:Electrode/x:R) and not(./x:Electrode/x:Phi) and not(./x:Electrode/x:Theta) and
                ./x:Electrode/x:X and ./x:Electrode/x:Y  and not(./x:Electrode/x:Z) else true()"/>            
        </xsd:complexType>
        <xsd:unique name="UniqueElectrodeName">
            <xsd:selector xpath="./x:Electrode"/>
            <xsd:field xpath="@Name"/>
        </xsd:unique>
    </xsd:element>
    
    <xsd:element name="Electrode">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="R" minOccurs="0" type="xsd:double"/>
                <xsd:element name="Phi" minOccurs="0" type="xsd:double"/>
                <xsd:element name="Theta" minOccurs="0" type="xsd:double"/>
                <xsd:element name="X" minOccurs="0" type="xsd:double"/>
                <xsd:element name="Y" minOccurs="0" type="xsd:double"/>
                <xsd:element name="Z" minOccurs="0" type="xsd:double"/>
            </xsd:sequence>
            <xsd:attribute name="Name">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string">
                        <xsd:minLength value="1"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>
