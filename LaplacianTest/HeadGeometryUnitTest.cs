using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ElectrodeFileStream;
using Laplacian;

namespace LaplacianTest
{
    [TestClass]
    public class HeadGeometryUnitTest
    {
        [TestMethod]
        public void TestHeadGeometryCOTR()
        {
            Console.WriteLine("\n***** Test 1 *****");
            //{R, theta, phi} "Math" coordinates of electrode locations
            double[,] electrodes = new double[,] {{11.5898, 0.120994, 4.7811}, {11.4658, 0.120994, 0.592309}, {11.4443,
   0.120994, 2.6867}, {11.4083, 0.321264, 2.55236}, {11.2608, 0.321264, 3.18068}, {11.4439, 0.321264, 3.809}, {11.7045, 0.321264, 
  4.43732}, {11.6825, 0.321264, 5.06563}, {11.4083, 0.321264, 5.69395}, {11.2608, 0.321264, 0.0390855}, {11.4439, 0.321264, 
  0.667404}, {11.7045, 0.321264, 1.29572}, {11.6825, 0.321264, 1.92404}, {11.7591, 0.513714, 1.15921}, {11.881, 0.513714, 
  1.57809}, {11.7508, 0.513714, 1.99697}, {11.4546, 0.513714, 2.41585}, {11.1885, 0.513714, 2.83473}, {11.1285, 0.513714, 
  3.25361}, {11.3143, 0.513714, 3.67249}, {11.623, 0.513714, 4.09137}, {11.8503, 0.513714, 4.51024}, {11.8458, 0.513714, 
  4.92912}, {11.6125, 0.513714, 5.348}, {11.3047, 0.513714, 5.76688}, {11.1261, 0.513714, 6.18576}, {11.195, 0.513714, 
  0.321454}, {11.4657, 0.513714, 0.740333}, {11.0053, 0.703414, 3.28805}, {11.1874, 0.703414, 3.60221}, {11.489, 0.703414, 
  3.91637}, {11.7948, 0.703414, 4.23053}, {11.988, 0.703414, 4.54469}, {11.9947, 0.703414, 4.85885}, {11.8126, 0.703414, 
  5.173}, {11.511, 0.703414, 5.48716}, {11.2052, 0.703414, 5.80132}, {11.012, 0.703414, 6.11548}, {11.0053, 0.703414, 
  0.146457}, {11.1874, 0.703414, 0.460616}, {11.489, 0.703414, 0.774775}, {11.7948, 0.703414, 1.08893}, {11.988, 0.703414, 
  1.40309}, {11.9947, 0.703414, 1.71725}, {11.8126, 0.703414, 2.03141}, {11.511, 0.703414, 2.34557}, {11.2052, 0.703414, 
  2.65973}, {11.012, 0.703414, 2.97389}, {10.9222, 0.891032, 6.05068}, {10.8547, 0.891032, 0.0292984}, {10.9601, 0.891032, 
  0.291098}, {11.2101, 0.891032, 0.552897}, {11.5379, 0.891032, 0.814697}, {11.8554, 0.891032, 1.0765}, {12.0778, 0.891032, 
  1.3383}, {12.1453, 0.891032, 1.60009}, {12.0399, 0.891032, 1.86189}, {11.7899, 0.891032, 2.12369}, {11.4621, 0.891032, 
  2.38549}, {11.1446, 0.891032, 2.64729}, {10.9222, 0.891032, 2.90909}, {10.8547, 0.891032, 3.17089}, {10.9601, 0.891032, 
  3.43269}, {11.2101, 0.891032, 3.69449}, {11.5379, 0.891032, 3.95629}, {11.8554, 0.891032, 4.21809}, {12.0778, 0.891032, 
  4.47989}, {12.1453, 0.891032, 4.74169}, {12.0399, 0.891032, 5.00349}, {11.7899, 0.891032, 5.26529}, {11.4621, 0.891032, 
  5.52709}, {11.1446, 0.891032, 5.78888}, {12.2379, 1.07689, 1.71385}, {12.062, 1.07689, 1.94656}, {11.7665, 1.07689, 
  2.17927}, {11.4144, 1.07689, 2.41198}, {11.0804, 1.07689, 2.64469}, {10.8357, 1.07689, 2.87741}, {10.7323, 1.07689, 
  3.11012}, {10.7923, 1.07689, 3.34283}, {11.0028, 1.07689, 3.57554}, {11.319, 1.07689, 3.80825}, {11.6738, 1.07689, 
  4.04096}, {11.9916, 1.07689, 4.27367}, {12.2048, 1.07689, 4.50638}, {12.2681, 1.07689, 4.73909}, {12.168, 1.07689, 
  4.9718}, {11.9257, 1.07689, 5.20451}, {11.5929, 1.07689, 5.43722}, {11.2404, 1.07689, 5.66993}, {10.943, 1.07689, 
  5.90264}, {10.7642, 1.07689, 6.13535}, {10.7419, 1.07689, 0.0848785}, {10.8808, 1.07689, 0.317589}, {11.1515, 1.07689, 
  0.5503}, {11.4963, 1.07689, 0.78301}, {11.8419, 1.07689, 1.01572}, {12.1148, 1.07689, 1.24843}, {12.2569, 1.07689, 
  1.48114}, {10.6237, 1.2612, 3.07368}, {10.6544, 1.2612, 3.29034}, {10.8414, 1.2612, 3.507}, {11.1502, 1.2612, 
  3.72366}, {11.5236, 1.2612, 3.94033}, {11.8926, 1.2612, 4.15699}, {12.1891, 1.2612, 4.37365}, {12.3582, 1.2612, 
  4.59031}, {12.3687, 1.2612, 4.80697}, {12.2185, 1.2612, 5.02363}, {11.9356, 1.2612, 5.24029}, {11.5721, 1.2612, 
  5.45696}, {11.1953, 1.2612, 5.67362}, {10.8749, 1.2612, 5.89028}, {10.6699, 1.2612, 6.10694}, {10.6184, 1.2612, 
  0.0404172}, {10.7299, 1.2612, 0.257079}, {10.9837, 1.2612, 0.47374}, {11.333, 1.2612, 0.690402}, {11.7131, 1.2612, 
  0.907063}, {12.0538, 1.2612, 1.12373}, {12.2922, 1.2612, 1.34039}, {12.3841, 1.2612, 1.55705}, {12.3126, 1.2612, 
  1.77371}, {12.0909, 1.2612, 1.99037}, {11.76, 1.2612, 2.20703}, {11.381, 1.2612, 2.42369}, {11.024, 1.2612, 
  2.64036}, {10.755, 1.2612, 2.85702}, {11.9334, 1.44408, 1.01163}, {12.2586, 1.44408, 1.22107}, {12.4526, 1.44408, 
  1.43051}, {12.4819, 1.44408, 1.63995}, {12.3414, 1.44408, 1.84939}, {12.0555, 1.44408, 2.05883}, {11.6734, 1.44408, 
  2.26827}, {11.2614, 1.44408, 2.4777}, {10.8907, 1.44408, 2.68714}, {10.6253, 1.44408, 2.89658}, {10.5111, 1.44408, 
  3.10602}, {10.568, 1.44408, 3.31546}, {10.786, 1.44408, 3.5249}, {11.1274, 1.44408, 3.73434}, {11.5333, 1.44408, 
  3.94378}, {11.9334, 1.44408, 4.15322}, {12.2586, 1.44408, 4.36266}, {12.4526, 1.44408, 4.5721}, {12.4819, 1.44408, 
  4.78154}, {12.3414, 1.44408, 4.99098}, {12.0555, 1.44408, 5.20042}, {11.6734, 1.44408, 5.40986}, {11.2614, 1.44408, 
  5.6193}, {10.8907, 1.44408, 5.82874}, {10.6253, 1.44408, 6.03818}, {10.5111, 1.44408, 6.24762}, {10.568, 1.44408, 
  0.17387}, {10.786, 1.44408, 0.38331}, {11.1274, 1.44408, 0.592749}, {11.5333, 1.44408, 0.802189}, {11.6332, 1.62558, 
  3.98828}, {12.0614, 1.62558, 4.19772}, {12.3926, 1.62558, 4.40716}, {12.5694, 1.62558, 4.6166}, {12.5613, 1.62558, 
  4.82604}, {12.3697, 1.62558, 5.03548}, {12.0277, 1.62558, 5.24492}, {11.5945, 1.62558, 5.45436}, {11.1449, 1.62558, 
  5.66379}, {10.7568, 1.62558, 5.87323}, {10.4971, 1.62558, 6.08267}, {10.4109, 1.62558, 0.00892808}, {10.5129, 1.62558, 
  0.218368}, {10.7857, 1.62558, 0.427807}, {11.1819, 1.62558, 0.637247}, {11.6332, 1.62558, 0.846686}, {12.0614, 1.62558, 
  1.05613}, {12.3926, 1.62558, 1.26557}, {12.5694, 1.62558, 1.475}, {12.5613, 1.62558, 1.68444}, {12.3697, 1.62558, 
  1.89388}, {12.0277, 1.62558, 2.10332}, {11.5945, 1.62558, 2.31276}, {11.1449, 1.62558, 2.5222}, {10.7568, 1.62558, 
  2.73164}, {10.4971, 1.62558, 2.94108}, {10.4109, 1.62558, 3.15052}, {10.5129, 1.62558, 3.35996}, {10.7857, 1.62558, 
  3.5694}, {11.1819, 1.62558, 3.77884}};
            //Math {theta, phi} coodrinates of sites to be evaluated
            double[,] evalSites = new double[,] {{0.151295, 1.31231}, {0.151295, 3.40671}, {0.151295, 
  5.5011}, {0.401709, 2.72848}, {0.401709, 3.3568}, {0.401709, 3.98512}, {0.401709, 4.61343}, {0.401709, 5.24175}, {0.401709, 
  5.87007}, {0.401709, 0.215204}, {0.401709, 0.843523}, {0.401709, 1.47184}, {0.401709, 2.10016}, {0.642924, 5.66532}, {0.642924, 
  6.0842}, {0.642924, 0.219892}, {0.642924, 0.638771}, {0.642924, 1.05765}, {0.642924, 1.47653}, {0.642924, 1.89541}, {0.642924, 
  2.31429}, {0.642924, 2.73317}, {0.642924, 3.15205}, {0.642924, 3.57092}, {0.642924, 3.9898}, {0.642924, 4.40868}, {0.642924, 
  4.82756}, {0.642924, 5.24644}, {0.879169, 5.83817}, {0.879169, 6.16887}, {0.879169, 0.216378}, {0.879169, 0.547072}, {0.879169, 
  0.877765}, {0.879169, 1.20846}, {0.879169, 1.53915}, {0.879169, 1.86985}, {0.879169, 2.20054}, {0.879169, 2.53124}, {0.879169, 
  2.86193}, {0.879169, 3.19262}, {0.879169, 3.52332}, {0.879169, 3.85401}, {0.879169, 4.18471}, {0.879169, 4.5154}, {0.879169, 
  4.84609}, {0.879169, 5.17679}, {0.879169, 5.50748}, {1.11227, 6.17131}, {1.11227, 0.173728}, {1.11227, 0.459328}, {1.11227, 
  0.744927}, {1.11227, 1.03053}, {1.11227, 1.31613}, {1.11227, 1.60172}, {1.11227, 1.88732}, {1.11227, 2.17292}, {1.11227, 
  2.45852}, {1.11227, 2.74412}, {1.11227, 3.02972}, {1.11227, 3.31532}, {1.11227, 3.60092}, {1.11227, 3.88652}, {1.11227, 
  4.17212}, {1.11227, 4.45772}, {1.11227, 4.74332}, {1.11227, 5.02892}, {1.11227, 5.31452}, {1.11227, 5.60012}, {1.11227, 
  5.88571}, {1.34343, 1.88085}, {1.34343, 2.14265}, {1.34343, 2.40445}, {1.34343, 2.66625}, {1.34343, 2.92804}, {1.34343, 
  3.18984}, {1.34343, 3.45164}, {1.34343, 3.71344}, {1.34343, 3.97524}, {1.34343, 4.23704}, {1.34343, 4.49884}, {1.34343, 
  4.76064}, {1.34343, 5.02244}, {1.34343, 5.28424}, {1.34343, 5.54604}, {1.34343, 5.80784}, {1.34343, 6.06964}, {1.34343, 
  0.0482512}, {1.34343, 0.310051}, {1.34343, 0.57185}, {1.34343, 0.833649}, {1.34343, 1.09545}, {1.34343, 1.35725}, {1.34343, 
  1.61905}, {1.57081, 1.74601}, {1.57081, 2.00781}, {1.57081, 2.26961}, {1.57081, 2.53141}, {1.57081, 2.79321}, {1.57081, 
  3.05501}, {1.57081, 3.31681}, {1.57081, 3.57861}, {1.57081, 3.84041}, {1.57081, 4.10221}, {1.57081, 4.36401}, {1.57081, 
  4.62581}, {1.57081, 4.88761}, {1.57081, 5.14941}, {1.57081, 5.41121}, {1.57081, 5.673}, {1.57081, 5.9348}, {1.57081, 
  6.1966}, {1.57081, 0.175218}, {1.57081, 0.437017}, {1.57081, 0.698816}, {1.57081, 0.960616}, {1.57081, 1.22242}, {1.57081, 1.48421}};
            int Ne = electrodes.GetLength(0);
            ElectrodeRecord[] eSites = new ElectrodeRecord[Ne];
            for (int i = 0; i < Ne; i++)
            {
                double[] t = { electrodes[i, 0], electrodes[i, 1], electrodes[i, 2] };
                eSites[i] = new XYZRecord("C" + i.ToString("000"), t);
            }
            HeadGeometry hg;
            for (int order = 0; order <= 9; order++)
            {
                hg = new HeadGeometry(eSites, order);
                int Nv = evalSites.GetLength(0);
                double sum0 = 0D;
                double sum1 = 0D;
                double max = double.MinValue;
                for (int i = 0; i < Nv; i++)
                {
                    double diff = head1(evalSites[i, 0], evalSites[i, 1]) - hg.EvaluateAt(evalSites[i, 0], evalSites[i, 1]);
                    sum0 += diff;
                    sum1 += diff * diff;
                    max = Math.Max(Math.Abs(diff), max);
                }
                sum0 /= Nv;
                sum1 /= Nv;
                sum1 = Math.Sqrt(sum1);
                Console.WriteLine("Errors for order {3}: Ave = {0}, RMS = {1}, Max = {2}", sum0, sum1, max, order);
            }
            Console.WriteLine("\n***** Test 2 *****");
            electrodes = new double[,] {{11.3997, 0.120994, 5.41395}, {11.614, 0.120994, 1.22516}, {11.4863, 
  0.120994, 3.31955}, {11.1432, 0.321264, 6.26181}, {11.5532, 0.321264, 0.606946}, {11.8019, 0.321264, 1.23526}, {11.5982, 
  0.321264, 1.86358}, {11.2897, 0.321264, 2.4919}, {11.3569, 0.321264, 3.12022}, {11.7288, 0.321264, 3.74854}, {11.8723, 0.321264, 
  4.37686}, {11.5365, 0.321264, 5.00518}, {11.1194, 0.321264, 5.63349}, {11.1472, 0.513714, 2.5422}, {11.1765, 0.513714, 
  2.96108}, {11.5019, 0.513714, 3.37995}, {11.9069, 0.513714, 3.79883}, {12.1086, 0.513714, 4.21771}, {11.9471, 0.513714, 
  4.63659}, {11.4961, 0.513714, 5.05547}, {11.0196, 0.513714, 5.47435}, {10.8035, 0.513714, 5.89323}, {10.9713, 0.513714, 
  0.0289221}, {11.4057, 0.513714, 0.447801}, {11.8274, 0.513714, 0.86668}, {11.9786, 0.513714, 1.28556}, {11.7896, 0.513714, 
  1.70444}, {11.4201, 0.513714, 2.12332}, {12.3056, 0.703414, 4.12706}, {12.2715, 0.703414, 4.44122}, {11.9605, 0.703414, 
  4.75538}, {11.4707, 0.703414, 5.06953}, {10.969, 0.703414, 5.38369}, {10.6291, 0.703414, 5.69785}, {10.5668, 0.703414, 
  6.01201}, {10.7974, 0.703414, 0.0429863}, {11.2304, 0.703414, 0.357146}, {11.7045, 0.703414, 0.671305}, {12.0489, 0.703414, 
  0.985464}, {12.1471, 0.703414, 1.29962}, {11.9805, 0.703414, 1.61378}, {11.6331, 0.703414, 1.92794}, {11.258, 0.703414, 
  2.2421}, {11.0164, 0.703414, 2.55626}, {11.0145, 0.703414, 2.87042}, {11.2616, 0.703414, 3.18458}, {11.6657, 0.703414, 
  3.49874}, {12.0684, 0.703414, 3.8129}, {10.6361, 0.891032, 0.0548554}, {11.0834, 0.891032, 0.316655}, {11.5868, 0.891032, 
  0.578454}, {12.018, 0.891032, 0.840254}, {12.2714, 0.891032, 1.10205}, {12.2916, 0.891032, 1.36385}, {12.0878, 0.891032, 
  1.62565}, {11.7296, 0.891032, 1.88745}, {11.3282, 0.891032, 2.14925}, {11.0047, 0.891032, 2.41105}, {10.8575, 0.891032, 
  2.67285}, {10.9347, 0.891032, 2.93465}, {11.2205, 0.891032, 3.19645}, {11.6396, 0.891032, 3.45825}, {12.0769, 0.891032, 
  3.72005}, {12.4086, 0.891032, 3.98185}, {12.5358, 0.891032, 4.24365}, {12.4119, 0.891032, 4.50545}, {12.0557, 0.891032, 
  4.76724}, {11.5474, 0.891032, 5.02904}, {11.0081, 0.891032, 5.29084}, {10.5687, 0.891032, 5.55264}, {10.3353, 0.891032, 
  5.81444}, {10.3618, 0.891032, 6.07624}, {10.9698, 1.07689, 2.36356}, {10.7628, 1.07689, 2.59627}, {10.7604, 1.07689, 
  2.82898}, {10.9684, 1.07689, 3.06169}, {11.3451, 1.07689, 3.2944}, {11.8099, 1.07689, 3.52711}, {12.2605, 1.07689, 
  3.75982}, {12.5948, 1.07689, 3.99253}, {12.7329, 1.07689, 4.22524}, {12.6349, 1.07689, 4.45795}, {12.3095, 1.07689, 
  4.69066}, {11.8131, 1.07689, 4.92337}, {11.2384, 1.07689, 5.15608}, {10.6954, 1.07689, 5.38879}, {10.2887, 1.07689, 
  5.6215}, {10.0956, 1.07689, 5.85422}, {10.1505, 1.07689, 6.08693}, {10.4378, 1.07689, 0.0364513}, {10.8953, 1.07689, 
  0.269162}, {11.4277, 1.07689, 0.501872}, {11.9265, 1.07689, 0.734583}, {12.2932, 1.07689, 0.967294}, {12.4595, 1.07689, 
  1.2}, {12.4014, 1.07689, 1.43271}, {12.144, 1.07689, 1.66543}, {11.7547, 1.07689, 1.89814}, {11.3293, 1.07689, 
  2.13085}, {12.5785, 1.2612, 1.36986}, {12.3626, 1.2612, 1.58652}, {11.9882, 1.2612, 1.80318}, {11.5365, 1.2612, 
  2.01985}, {11.1025, 1.2612, 2.23651}, {10.7769, 1.2612, 2.45317}, {10.6284, 1.2612, 2.66983}, {10.6912, 1.2612, 
  2.88649}, {10.9581, 1.2612, 3.10315}, {11.3814, 1.2612, 3.31981}, {11.8822, 1.2612, 3.53648}, {12.3643, 1.2612, 
  3.75314}, {12.7328, 1.2612, 3.9698}, {12.9115, 1.2612, 4.18646}, {12.8576, 1.2612, 4.40312}, {12.5699, 1.2612, 
  4.61978}, {12.0897, 1.2612, 4.83645}, {11.4934, 1.2612, 5.05311}, {10.8796, 1.2612, 5.26977}, {10.3506, 1.2612, 
  5.48643}, {9.99467, 1.2612, 5.70309}, {9.86988, 1.2612, 5.91975}, {9.99374, 1.2612, 6.13641}, {10.3403, 1.2612, 
  0.069891}, {10.845, 1.2612, 0.286553}, {11.4167, 1.2612, 0.503214}, {11.9544, 1.2612, 0.719876}, {12.3658, 1.2612, 
  0.936537}, {12.5837, 1.2612, 1.1532}, {9.66939, 1.44408, 5.94392}, {9.82824, 1.44408, 6.15336}, {10.2168, 1.44408, 
  0.079617}, {10.7677, 1.44408, 0.289057}, {11.3878, 1.44408, 0.498496}, {11.9748, 1.44408, 0.707936}, {12.4342, 1.44408, 
  0.917375}, {12.6958, 1.44408, 1.12681}, {12.7249, 1.44408, 1.33625}, {12.5283, 1.44408, 1.54569}, {12.1524, 1.44408, 
  1.75513}, {11.6746, 1.44408, 1.96457}, {11.1896, 1.44408, 2.17401}, {10.7923, 1.44408, 2.38345}, {10.5607, 1.44408, 
  2.59289}, {10.5426, 1.44408, 2.80233}, {10.7464, 1.44408, 3.01177}, {11.1399, 1.44408, 3.22121}, {11.6552, 1.44408, 
  3.43065}, {12.2011, 1.44408, 3.64009}, {12.6783, 1.44408, 3.84953}, {12.9971, 1.44408, 4.05897}, {13.0935, 1.44408, 
  4.26841}, {12.9401, 1.44408, 4.47785}, {12.5515, 1.44408, 4.68729}, {11.9826, 1.44408, 4.89673}, {11.3193, 1.44408, 
  5.10617}, {10.6643, 1.44408, 5.3156}, {10.1199, 1.44408, 5.52504}, {9.77065, 1.44408, 5.73448}, {11.4068, 1.62558, 
  5.07582}, {10.6773, 1.62558, 5.28526}, {10.0539, 1.62558, 5.4947}, {9.63358, 1.62558, 5.70414}, {9.48022, 1.62558, 
  5.91357}, {9.61396, 1.62558, 6.12301}, {10.008, 1.62558, 0.0492684}, {10.5935, 1.62558, 0.258708}, {11.2713, 1.62558, 
  0.468147}, {11.9292, 1.62558, 0.677587}, {12.461, 1.62558, 0.887026}, {12.7845, 1.62558, 1.09647}, {12.8554, 1.62558, 
  1.30591}, {12.6746, 1.62558, 1.51534}, {12.287, 1.62558, 1.72478}, {11.7735, 1.62558, 1.93422}, {11.2364, 1.62558, 
  2.14366}, {10.781, 1.62558, 2.3531}, {10.4969, 1.62558, 2.56254}, {10.442, 1.62558, 2.77198}, {10.6322, 1.62558, 
  2.98142}, {11.0382, 1.62558, 3.19086}, {11.5907, 1.62558, 3.4003}, {12.1918, 1.62558, 3.60974}, {12.7328, 1.62558, 
  3.81918}, {13.1126, 1.62558, 4.02862}, {13.2556, 1.62558, 4.23806}, {13.1255, 1.62558, 4.4475}, {12.7318, 1.62558, 
  4.65694}, {12.1288, 1.62558, 4.86638}};
            Ne = electrodes.GetLength(0);
            eSites = new ElectrodeRecord[Ne];
            for (int i = 0; i < Ne; i++)
            {
                double[] t = { electrodes[i, 0], electrodes[i, 1], electrodes[i, 2] };
                eSites[i] = new XYZRecord("C" + i.ToString("000"), t);
            }
            for (int order = 0; order <= 9; order++)
            {
                hg = new HeadGeometry(eSites, order);
                int Nv = evalSites.GetLength(0);
                double sum0 = 0D;
                double sum1 = 0D;
                double max = double.MinValue;
                for (int i = 0; i < Nv; i++)
                {
                    double diff = head2(evalSites[i, 0], evalSites[i, 1]) - hg.EvaluateAt(evalSites[i, 0], evalSites[i, 1]);
                    sum0 += diff;
                    sum1 += diff * diff;
                    max = Math.Max(Math.Abs(diff), max);
                }
                sum0 /= Nv;
                sum1 /= Nv;
                sum1 = Math.Sqrt(sum1);
                Console.WriteLine("Errors for order {3}: Ave = {0}, RMS = {1}, Max = {2}", sum0, sum1, max, order);
            }
            Console.WriteLine("\n***** Test EFK *****");
            //EFK head model in {X, Y, Z} coordinates
            electrodes = new double[,] {{0.92585, -2.83848, 12.0865}, {0.770338, -4.4552, 
  11.8294}, {0.904602, -5.92103, 11.225}, {0.896105, -7.37466, 10.3215}, {-1.60081, -8.43238, 9.41563}, {-3.79794, -7.14282, 
  9.71575}, {-4.53077, -7.85936, 8.34908}, {-4.07243, -9.11487, 6.95442}, {-4.46511, -9.52431, 5.43383}, {-4.85817, -9.79323, 
  3.81446}, {-4.96892, -9.94035, 2.33421}, {-5.27784, -9.89604, 0.646299}, {-2.52951, -11.1967, 1.02663}, {-2.3674, -11.2396, 
  2.52105}, {-2.21442, -11.0466, 4.18581}, {-2.21968, -10.6142, 5.49328}, {-2.00267, -9.95918, 6.9548}, {-2.35124, -9.08532, 
  8.43564}, {0.540188, -8.45086, 9.43838}, {0.544212, -9.43662, 7.98777}, {0.386445, -10.1614, 6.64348}, {0.402974, -10.9236, 
  5.11278}, {0.233101, -11.2075, 3.99147}, {0.316444, -11.5611, 2.56604}, {-0.0183098, -11.516, 1.61726}, {2.48369, -10.9291, 
  1.3748}, {2.55895, -10.8542, 2.70284}, {2.56429, -10.4841, 4.034}, {2.42183, -10.0999, 5.55064}, {2.45681, -9.49576, 
  6.96898}, {2.80361, -8.67328, 8.33788}, {2.54421, -7.68412, 9.67555}, {1.85433, -3.14185, 11.8742}, {2.61973, -4.74625, 
  11.2219}, {4.57204, -6.51458, 9.26099}, {5.06297, -7.16112, 8.06166}, {4.36271, -8.57963, 6.6666}, {4.60095, -8.80754, 
  5.08928}, {4.69573, -9.01677, 3.62671}, {4.61812, -9.25802, 1.99398}, {4.70765, -9.10954, 0.516657}, {6.4604, -6.88784, 
  1.66118}, {6.6268, -6.81959, 3.25662}, {6.76051, -6.7129, 4.95748}, {6.59876, -6.48054, 6.46328}, {7.83456, -4.21618, 
  3.02927}, {7.77917, -4.25995, 4.65921}, {7.60982, -4.21536, 6.42562}, {6.92867, -4.76972, 7.89047}, {6.02418, -4.31427, 
  9.32899}, {4.44606, -4.76724, 10.4539}, {3.46761, -2.28463, 11.3031}, {5.13677, -2.4191, 10.2776}, {6.32672, -1.97321, 
  9.30942}, {7.30322, -1.71755, 8.00474}, {7.87745, -1.62553, 6.32519}, {8.2173, -1.35818, 4.76437}, {8.26144, -1.44028, 
  2.95183}, {7.96785, 1.21768, 3.28244}, {7.87755, 1.21941, 4.96311}, {7.55731, 0.991136, 6.78001}, {6.74513, 1.07259, 
  8.34681}, {5.76193, 0.474748, 9.62504}, {4.589, 0.270124, 10.5875}, {1.55532, -1.08962, 12.2123}, {2.65059, -0.0086546, 
  11.6758}, {4.52341, 2.43846, 10.1309}, {5.21063, 3.49665, 9.03033}, {6.56352, 3.27583, 7.39916}, {6.87868, 3.76862, 
  5.75452}, {6.893, 4.20424, 3.97756}, {5.19136, 6.53309, 5.14249}, {5.1154, 5.97169, 6.68811}, {4.82873, 5.23604, 
  8.07573}, {3.0133, 1.62303, 11.0213}, {2.79211, 3.24591, 10.3906}, {3.27417, 4.50455, 9.42653}, {2.78601, 5.89847, 
  8.53782}, {2.77011, 6.94304, 7.35053}, {2.58327, 7.59472, 5.9921}, {-0.093374, 7.64069, 6.47666}, {-0.0775044, 7.14123, 
  7.74207}, {0.0754798, 6.15727, 8.86802}, {0.247437, 4.86966, 9.92329}, {0.370372, 3.58318, 10.799}, {0.522075, 2.11347, 
  11.4301}, {0.462403, 0.589159, 11.9412}, {-1.77914, 1.24851, 11.5724}, {-1.92455, 3.0428, 10.8563}, {-2.29844, 4.22343, 
  9.9645}, {-2.28837, 5.50332, 8.98615}, {-2.7984, 6.48194, 7.76263}, {-3.03518, 7.23188, 6.4743}, {-5.78321, 5.34382, 
  5.89074}, {-5.13536, 4.92154, 7.36457}, {-4.55464, 4.24495, 8.61146}, {-0.555755, -1.38431, 12.241}, {-1.89164, -0.388786, 
  11.9719}, {-3.87753, 1.74327, 10.799}, {-4.87968, 2.49032, 9.69703}, {-5.37408, 1.72463, 8.22618}, {-6.20146, 2.13691, 
  6.72293}, {-6.68687, 2.57405, 5.24683}, {-7.71423, -0.0810154, 4.46397}, {-7.34426, -0.331682, 6.10917}, {-6.66079, -0.453952, 
  7.59597}, {-5.66658, -0.41604, 9.01381}, {-4.4121, -0.917108, 10.2038}, {-2.96177, -1.0922, 10.9974}, {-1.9881, -3.30441, 
  11.3921}, {-0.278798, -3.73344, 11.5671}, {-1.28258, -5.6828, 11.1196}, {-3.01896, -5.81964, 10.7119}, {-3.79186, -3.26245, 
  10.8885}, {-5.17662, -3.10604, 10.0561}, {-6.30327, -3.13561, 8.78692}, {-7.17188, -2.91667, 7.33496}, {-7.66223, -3.00456, 
  5.70033}, {-8.11101, -2.83878, 3.96071}, {-7.781, -5.48195, 3.51426}, {-7.37652, -5.53164, 5.31596}, {-6.92797, -5.42573, 
  6.94372}, {-5.9094, -5.89936, 8.48388}, {-4.7295, -5.47179, 9.86733}, {-5.73513, -7.71367, 6.84751}, {-6.28593, -7.95471, 
  5.16335}, {-6.75658, -7.99608, 3.56999}, {-6.82131, -8.23076, 1.8815}};
            Ne = electrodes.GetLength(0);
            eSites = new XYZRecord[Ne];
            for (int i = 0; i < Ne; i++)
            {
                eSites[i] = new XYZRecord("C" + i.ToString("000"), electrodes[i, 0], electrodes[i, 1], electrodes[i, 2]);
            }
            for (int order = 0; order <= 12; order++)
            {
                hg = new HeadGeometry(eSites, order);
                double sum0 = 0D;
                double sum1 = 0D;
                double max = double.MinValue;
                for (int i = 0; i < Ne; i++)
                {
                    double[] p = eSites[i].convertToMathRThetaPhi();
                    double diff = p[0] - hg.EvaluateAt(p[1], p[2]);
                    sum0 += diff;
                    sum1 += diff * diff;
                    max = Math.Max(Math.Abs(diff), max);
                }
                sum0 /= Ne;
                sum1 /= Ne;
                sum1 = Math.Sqrt(sum1);
                Console.WriteLine("Errors for order {3}: Ave = {0}, RMS = {1}, Max = {2}", sum0, sum1, max, order);
            }
        }

        private double head1(double theta, double phi)
        {
            return 11.5 - 1.5 * Math.Sin(theta / 2D) * Math.Cos(2D * phi);
        }

        private double head2(double theta, double phi)
        {
            return 11.5 - 1.5 * Math.Sin(theta / 2D) * (Math.Cos(2D * phi) - Math.Sin(2D * phi)) - Math.Sin(theta / 3D) * Math.Cos(phi);
        }
    }
}
